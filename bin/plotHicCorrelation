#!/usr/bin/env python

import argparse
from kaic.analysis.hic_correlation_plots import plot_chromosome_correlation, plot_distance_correlation
import logging
logging.basicConfig(level=logging.DEBUG)
import os.path


def splitList(thisList):
    return thisList.split(",");


if __name__ == '__main__':
    parser = argparse.ArgumentParser();
    
    parser.add_argument(
        'hic1',
        help='''Hi-C file 1'''
    );
    
    parser.add_argument(
        'hic2',
        type=splitList,
        help='''Hi-C file 2'''
    );
    
    parser.add_argument(
        'genome',
        help='''Genome object file'''
    );
    
    parser.add_argument(
        'output',
        help='''Output filename'''
    )
    
    parser.add_argument(
        '-res', '--resolution', dest='resolution',
        type=int,
        help='''Resolution (binning distance) of Hi-C maps''',
        required=True
    )
    
    parser.add_argument(
        '-d', '--distance', dest='distance',
        action='store_true',
        help='''Show intra-chromosomal distance correlation'''
    )
    parser.set_defaults(distance=False)
    
    parser.add_argument(
        '-r', '--reverse', dest='reverse',
        action='store_true',
        help='''Reverse distance correlation direction (start from largest distance)'''
    )
    parser.set_defaults(reverse=False)
    
    parser.add_argument(
        '-w', '--window', dest='window',
        type=int,
        default=None,
        help='''Window size in base-pairs for distance correlation'''
    )
    
    parser.add_argument(
        '-z1', '--zero_first', dest='zero_first',
        action='store_true',
        help='''Include zeros of first data set in correlation'''
    )
    parser.set_defaults(zero_first=False)
    
    parser.add_argument(
        '-z2', '--zero_second', dest='zero_second',
        action='store_true',
        help='''Include zeros of second data set in correlation'''
    )
    parser.set_defaults(zero_second=False)
    
    
   
    args = parser.parse_args()
    
    if args.distance:
        if type(args.hic2) == list:
            names = []
            for name in args.hic2:
                short = os.path.splitext(os.path.basename(name))[0]
                names.append(short)
        else:
            names = [os.path.splitext(os.path.basename(args.hic2))[0]]
        plot_distance_correlation(args.hic1, args.hic2, args.genome, args.resolution,
                                  reverse=args.reverse, window=args.window, output=args.output,
                                  names=names, include_first_zeros=args.zero_first, include_second_zeros=args.zero_second)
    else:
        plot_chromosome_correlation(args.hic1, args.hic2, args.genome, args.resolution, output=args.output)
        
        
        