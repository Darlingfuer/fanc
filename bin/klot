#!/usr/bin/env python

import warnings
import sys
import os
from itertools import groupby
from kaic.commands import klot_commands as commands
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')


class Klot(object):

    def __init__(self):
        #
        # define parsers for klot and subplots
        #

        # global parser
        global_parser = commands.klot_parser()
        self.global_parser = global_parser

        subplot_parser = commands.type_parser()
        self.subplot_parser = subplot_parser

        # sort and parse arguments
        global_args, subplot_data = self._parse_argument_vector(sys.argv[1:])

        if global_args.print_version:
            import kaic
            print(kaic.__version__)
            exit()

        if global_args.script is not None:
            logging.info("Parsing script file")
            script_global_args, script_subplots = self._parse_script(global_args.script)
            d_global = vars(global_args)
            d_script_global = vars(script_global_args)
            for key, value in d_script_global.items():
                # global parameters can only be overridden if not explicitly specified
                if d_global[key] == self.global_parser.get_default(key):
                    d_global[key] = value
            subplot_data = script_subplots + subplot_data

        if len(subplot_data) == 0:
            print("klot: error: Need to provide at least one plot")
            self.global_parser.print_help()
            exit(1)

        # configure output
        output_file = None
        if global_args.output is not None:
            import matplotlib
            matplotlib.use("pdf")
            output_file = os.path.expanduser(global_args.output)

        height_ratios = []
        plots = []
        fix_chromosome = []
        hide_x = []
        for plot_method, args in subplot_data:
            # create plot
            plot, plot_args = plot_method(args)
            plots.append(plot)

            # register aspect ratio
            if plot_args.aspect_ratio is None:
                if hasattr(plot, 'get_default_aspect'):
                    height_ratios.append(plot.get_default_aspect())
                else:
                    height_ratios.append(1.)
            else:
                height_ratios.append(plot_args.aspect_ratio)

            fix_chromosome.append(plot_args.fix_chromosome)
            hide_x.append(plot_args.hide_x)

            # set plot title
            plot.title = plot_args.title

        # parse regions
        regions = []
        if global_args.regions is not None:
            for r in global_args.regions:
                path = os.path.expanduser(r)
                if os.path.isfile(path):
                    import kaic
                    path_regions = kaic.load(path, mode='r')
                    if not hasattr(path_regions, 'regions'):
                        raise ValueError("Provided file does not contain any regions ({})".format(path))
                    regions += list(path_regions.regions)
                else:
                    import kaic
                    region = kaic.GenomicRegion.from_string(r)
                    regions.append(region)

        if len(regions) == 0:
            raise RuntimeError("Must provide at least one region for plotting!")

        logging.info("Found {} regions".format(len(regions)))

        if len(regions) > 1 and output_file is not None:
            from kaic.tools.general import mkdir
            mkdir(output_file)

        figure_width = global_args.width
        figure_height = sum(global_args.width*aspect+global_args.hspace for aspect in height_ratios) \
            if global_args.height is None else global_args.height

        import kaic.plotting as kplt
        for i, region in enumerate(regions):
            if global_args.window_size is not None:
                chromosome = region.chromosome
                start = max(1, region.start - int(global_args.window_size / 2))
                end = region.end + int(global_args.window_size / 2)
                import kaic
                plot_region = kaic.GenomicRegion(chromosome=chromosome, start=start, end=end)
            else:
                plot_region = region

            with kplt.GenomicFigure(plots, figsize=(figure_width, figure_height), fix_chromosome=fix_chromosome,
                                    height_ratios=height_ratios, gridspec_args={'hspace': global_args.hspace},
                                    invert_x=global_args.invert_x, hide_x=hide_x) as gf:
                try:
                    fig, axes = gf.plot(plot_region)
                except Exception as error:
                    warnings.warn("There was an error with plot {}, region {}:{}-{} ({})".format(i, region.chromosome,
                                                                                                 region.start,
                                                                                                 region.end,
                                                                                                 error))
                    continue

                if output_file is not None:
                    if len(regions) == 1:
                        fig.savefig(output_file)
                    else:
                        if global_args.name == '':
                            fig.savefig(output_file + '/{}_{}_{}-{}.pdf'.format(i, region.chromosome,
                                                                                region.start, region.end))
                        else:
                            fig.savefig(output_file + '/{}_{}_{}_{}-{}.pdf'.format(i, global_args.name,
                                                                                   region.chromosome,
                                                                                   region.start, region.end))
                else:
                    kplt.sns.plt.show()

    def _plot_type(self, subplot_args):

        if subplot_args.type is not None:
            if not hasattr(commands, subplot_args.type):
                print("klot: error: Unrecognised plot type {}".format(subplot_args.type))
                self.subplot_parser.print_help()
                exit(1)
            return getattr(commands, subplot_args.type)
        else:
            data = []
            for file_name in subplot_args.data:
                try:
                    if not os.path.isfile(file_name):
                        data.append(str)
                    else:
                        import kaic
                        with kaic.load(file_name, mode='r') as datum:
                            data.append(type(datum))
                except ValueError:
                    print("klot: error: Cannot auto-detect file type for {}. Use -t option.".format(file_name))
                    self.subplot_parser.print_help()
                    exit(1)

            if len(data) == 0:
                print("klot: error: To automatically identify plot you "
                      "must provide data or use -t option.".format(data))
                self.subplot_parser.print_help()
                exit(1)

            import kaic
            plot_type_detector = {
                (kaic.Hic,): commands.hic,
                (kaic.AccessOptimisedHic,): commands.hic,
                (kaic.FoldChangeMatrix,): commands.fc,
                (kaic.InsulationIndex,): commands.array,
                (kaic.DirectionalityIndex,): commands.array,
                (kaic.RegionContactAverage,): commands.array,
                (kaic.GenomicTrack,): commands.line,
                (kaic.Bed,): commands.region,
                (kaic.Hic, kaic.Hic): commands.hicsplit,
                (kaic.Hic, kaic.AccessOptimisedHic): commands.hicsplit,
                (kaic.AccessOptimisedHic, kaic.Hic): commands.hicsplit,
                (kaic.AccessOptimisedHic, kaic.AccessOptimisedHic): commands.hicsplit,
                (kaic.Hic, kaic.FoldChangeMatrix): commands.hicvfc,
                (kaic.AccessOptimisedHic, kaic.FoldChangeMatrix): commands.hicvfc
            }

            if tuple(data) in plot_type_detector:
                return plot_type_detector[tuple(data)]
            else:
                print("klot: error: Could not find matching plot for {}. Use -t option.".format(data))
                self.subplot_parser.print_help()
                exit(1)

    def _parse_argument_vector(self, argv):
        subplot_data = []
        group_counter = 0
        global_args = None
        for k, group in groupby(argv, lambda x: x == "--plot" or x == '-p'):
            if group_counter == 0:
                if not k:
                    global_args = self.global_parser.parse_args(list(group))
                else:
                    global_args = self.global_parser.parse_args([])
            elif not k:
                sub_args, plot_args = self.subplot_parser.parse_known_args(list(group))
                subplot_type = self._plot_type(sub_args)
                subplot_data.append((subplot_type, sub_args.data + plot_args))
            group_counter += 1

        return global_args, subplot_data

    def _parse_script(self, script):
        script = os.path.expanduser(script)

        if not os.path.isfile(script):
            print('klot: error: This is not a script file: {}'.format(script))

        import re
        import shlex
        re_equal_sign = re.compile("\s*=\s*")
        parameters = []
        with open(script, 'r') as s:
            for i, line in enumerate(s):
                if line.startswith("#"):
                    continue

                cmd_val = re_equal_sign.split(line.rstrip())
                if len(cmd_val) > 2:
                    print('klot: error: Too many equal-signs on line {}'.format(i))

                if len(cmd_val) == 1:
                    if re.match("^\s*$", cmd_val[0]):
                        continue
                    parameters.append('--' + cmd_val[0])
                elif len(cmd_val) == 2:
                    cmd, val = cmd_val
                    cmd = '--' + cmd.strip()
                    if cmd != '--regions' and cmd != '--plot' and cmd != '--data':
                        parameters.append(cmd)
                    sub_parameters = shlex.split(val)
                    parameters += sub_parameters

        return self._parse_argument_vector(parameters)

if __name__ == '__main__':
    Klot()
