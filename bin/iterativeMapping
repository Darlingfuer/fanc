#!/usr/bin/env python

import argparse;
import os;
from kaic.mapping.iterativeMapping import iterative_mapping

def splitList(thisList):
    return thisList.split(",");

if __name__ == '__main__':
    parser = argparse.ArgumentParser();
    bc = os.popen('which bowtie2');
    bowtie_path = bc.read().rstrip();
    print bowtie_path;
    
    parser.add_argument(
        'input',
        type=splitList,
        help='''Input FASTQ files (comma-separated)'''
    );
    
    parser.add_argument(
        'index',
        help='''Bowtie 2 index (include prefix)'''
    );
    
    parser.add_argument(
        'output',
        type=splitList,
        help='''Output files (must be same number as input files)'''
    );
    
    parser.add_argument(
        '-b', '--bowtie', dest='bowtie',
        default=bowtie_path,
        help='''Bowtie 2 executable path (will check PATH variable by default)'''
    );
    
    parser.add_argument(
        '-bo', '--bowtie2-options', dest='bowtie2_options',
        default='--very-sensitive --no-unal --score-min "C,0,-1"',
        help='''Bowtie 2 command line options, default: --very-sensitive --no-unal --score-min "C,0,-1"'''
    )
    
    parser.add_argument(
        '-m', '--min-length', dest='min_length',
        type=int,
        default=25,
        help='''Minimum sequence length to attempt the mapping'''
    );
    
    parser.add_argument(
        '-s', '--step', dest='step',
        type=int,
        default=2,
        help='''Step size to increase mapped sequence length'''
    );
    
    parser.add_argument(
        '-t', '--threads', dest='threads',
        type=int,
        default=8,
        help='''Number of threads'''
    );
    
    parser.add_argument(
        '-tmp', '--temp-dir', dest='tmp',
        default="/tmp",
        help='''Temporary directory'''
    );
    
    parser.add_argument(
        '-nj', '--no-join', dest='join',
        action='store_false',
        help='''Do not join partial SAM files into a single file'''
    );
    
    parser.add_argument(
        '-nf', '--no-filter', dest='filter',
        action='store_false',
        help='''Do not filter output SAM file by mappability, mapping quality, and uniqueness'''
    );
    
    parser.add_argument(
        '-q', '--quality', dest='quality',
        type=int,
        default=30,
        help='''Mapping quality to filter mapped reads'''
    );
    
    parser.add_argument(
        '-nc', '--no-clean', dest='clean',
        action='store_false',
        help='''Do not delete partial SAM files (*.sam.\d)'''
    );
    
    parser.set_defaults(join=True);
    parser.set_defaults(filter=True);
    parser.set_defaults(clean=True);
    
    args = parser.parse_args()
    
    iterative_mapping(args.input, args.output, args.index, args.bowtie, args.min_length, args.step, args.threads, args.tmp, args.quality, args.join, args.filter, args.clean, args.bowtie2_options)
