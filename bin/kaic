#!/usr/bin/env python

import os.path
import sys
from kaic.commands import kaic_commands as commands
from kaic.tools.signal_handling import enable_signal_traps, disable_signal_traps
from kaic.config import config

import logging
logger = logging.getLogger('')


class Kaic(object):

    def __init__(self):
        parser = commands.kaic_parser()

        flag_increments = {
            '-l': 2, '--log-file': 2,
            '-m': 2, '--email': 2, '--smtp-server': 2, '--smtp-username': 2,
            '--smtp-password': 2, '--smtp-sender-address': 2,
        }

        option_ix = 1
        while option_ix < len(sys.argv) and sys.argv[option_ix].startswith('-'):
            if sys.argv[option_ix] in flag_increments:
                option_ix += flag_increments[sys.argv[option_ix]]
            else:
                option_ix += 1

        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:option_ix+1])

        # configure logger
        if args.verbosity == 1:
            log_level = logging.WARN
        elif args.verbosity == 2:
            log_level = logging.INFO
        elif args.verbosity > 2:
            log_level = logging.DEBUG
        else:
            log_level = logging.INFO
        logger.setLevel(log_level)

        if not args.silent:
            sh = logging.StreamHandler()
            sh_formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
            sh.setFormatter(sh_formatter)
            sh.setLevel(log_level)
            logger.addHandler(sh)
        else:
            nh = logging.NullHandler()
            logger.addHandler(nh)

        if args.log_file is not None:
            log_file = os.path.expanduser(args.log_file)
            fh = logging.FileHandler(log_file, mode='a')
            formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
            fh.setFormatter(formatter)
            fh.setLevel(log_level)
            logger.addHandler(fh)

        # get version info
        if args.print_version:
            import kaic
            print(kaic.__version__)
            exit()

        if args.command is None or not hasattr(commands, args.command.replace("-", "_")):
            print('Unrecognized command')
            parser.print_help()
            exit(1)

        # echo parameters back to user
        kaic_command = " ".join(sys.argv)
        logger.info("Running '{}'".format(kaic_command))

        # use dispatch pattern to invoke method with same name
        from datetime import datetime
        start_date = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        try:
            if config.raise_exception_on_trapped_signal:
                enable_signal_traps()

            fixed_command = args.command.replace("-", "_")
            getattr(commands, fixed_command)([sys.argv[0]] + sys.argv[option_ix:])
            disable_signal_traps()
        except Exception:
            if args.email_to_address is not None:
                logger.info("Command failed, sending email...")
                from kaic.tools import emails
                import traceback

                exception_message = traceback.format_exc().replace("\n", "<br>")
                message = "Kai-C command (start date: {}): " \
                          "{}<br>failed with the following exception:<br>{}".format(start_date, kaic_command,
                                                                                    exception_message)
                subject = "{} ({}) failed".format(start_date, sys.argv[option_ix])
                emails.send_email(args.email_to_address, message, subject, from_address=args.email_from_address,
                                  server=args.smtp_server, credentials=(args.smtp_username, args.smtp_password))
            raise

        if args.email_to_address is not None:
            logger.info("Command completed, sending email...")
            from kaic.tools import emails
            import traceback

            message = "Kai-C command (start date: {}): " \
                      "{}<br>executed successfully!".format(start_date, kaic_command)
            subject = "{} ({}) completed".format(start_date, sys.argv[option_ix])
            emails.send_email(args.email_to_address, message, subject, from_address=args.email_from_address,
                              server=args.smtp_server, credentials=(args.smtp_username, args.smtp_password))

        # echo parameters back to user
        logger.info("Finished '{}'".format(" ".join(sys.argv)))


if __name__ == '__main__':
    Kaic()
