"""

Kai-C
=====

Provides
    1. Classes for working with Hi-C data
    2. Classes for working with tabular data

"""
import logging
import warnings
import os

from genomic_regions import GenomicRegion, load as gr_load
from .architecture.domains import InsulationScore, InsulationScores, DirectionalityIndex
from .architecture.compartments import ABCompartmentMatrix
from .architecture.comparisons import FoldChangeMatrix, DifferenceMatrix
from .architecture.aggregate import AggregateMatrix, aggregate_boundaries, aggregate_loops
from .config import config
from .general import FileBased
from .map import *
from .hic import Hic
from .matrix import Edge, RegionMatrix
from .pairs import ReadPairs
from .peaks import RaoPeakInfo
from .regions import Genome, Chromosome
from .registry import class_id_dict
from .version import __version__
import tables

# configure logging
logger = logging.getLogger(__name__)
logger.addHandler(logging.NullHandler())


def load(file_name, *args, **kwargs):
    """
    Load a file into your current Python session.

    :func:`~load` is a magic function that replaces the need for importing
    files using different classes or functions. It "just works" for all
    objects generated by Kai-C (:class:`~Hic`, :class:`~ReadPairs`,
    :class:`~ABCompartmentMatrix`, ...), for compatible Hi-C files from
    `Cooler <https://github.com/mirnylab/cooler>`_ or
    `Juicer <https://github.com/aidenlab/juicer>`_, and most of the major
    file formats for genomic regions (BED, GFF, BigWig, Tabix, ...).

    Simply run

    .. code::

        o = kaic.load("/path/to/file")

    Depending on the file type, the returned object can be the instance of
    one (or more) of these classes:

    - :class:`~RegionBased` for genomic region formats (BED, GFF, ..., but
      also most Kai-C objects)
    - :class:`~RegionMatrixContainer` or :class:`~RegionPairsContainer` for
      read pair or matrix-based Kai-C objects, as well as Cooler and Juicer
      files
    - :class:`~pysam.AlignmentFile` for SAM/BAM files

    :param file_name: Path to file
    :param args: Positional arguments passed to the class/function that can
                 load the file
    :param kwargs: Keyword arguments passed to the class/function that can
                   load the file
    :return: object (:class:`~RegionBased`, :class:`~RegionMatrixContainer`,
             :class:`~RegionPairsContainer`, or :class:`~pysam.AlignmentFile`)
    """
    mode = kwargs.pop('mode', 'r')
    file_name = os.path.expanduser(file_name)

    try:
        logger.debug("Trying FileBased classes")

        f = tables.open_file(file_name, mode='r')
        try:
            classid = f.get_node('/', 'meta_information').meta_node.attrs['_classid']
            classid = classid.decode() if isinstance(classid, bytes) else classid
        finally:
            f.close()
        logger.debug("Class ID string: {}".format(classid))
        cls_ = class_id_dict[classid]
        logger.debug("Detected {}".format(cls_))
        return cls_(file_name=file_name, mode=mode, *args, **kwargs)
    except (tables.HDF5ExtError, AttributeError, KeyError):
        pass

    from kaic.compatibility.juicer import JuicerHic, is_juicer
    if is_juicer(file_name):
        return JuicerHic(file_name, *args, **kwargs)

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            from kaic.compatibility.cooler import is_cooler, CoolerHic
        if is_cooler(file_name):
            return CoolerHic(file_name, *args, **kwargs)
    except (ImportError, OSError):
        pass

    return gr_load(file_name, *args, **kwargs)


example_data = dict(
    hic="test/data/test_network/rao2014.chr11_77400000_78600000.hic",
    chip_bigwig="test/data/test_plotting/CTCF_ChIP_FE_chr11_77-80Mb_mouse_embryo_fibroblasts.bigwig",
    chip_bedgraph="test/data/test_plotting/CTCF_ChIP_FE_chr11_77-80Mb_mouse_embryo_fibroblasts.bedgraph.gz",
    chip_peak_bed="test/data/test_plotting/CTCF_ChIP_FE_chr11_77-80Mb_mouse_embryo_fibroblasts.peaks.bed.gz",
    gene_gtf="test/data/test_plotting/genes_mm10_chr11_77-80Mb.gtf.gz",
)
_basepath = os.path.abspath(os.path.dirname(__file__))
example_data = {k: os.path.join(_basepath, v) for k, v in example_data.items()}
